<?xml version="1.0" encoding="UTF-8"?>
<project-instructions>

  <!-- 
    These instructions guide the development of a SwiftUI-based application.
    They establish rules for project structure, code organization, coding style, 
    adherence to tasks, and emphasis on reusability and maintainability.
  -->

  <overview>
    <description>
      This is a SwiftUI-based iOS application that uses AI-driven instructions. 
      The project maintains a structured approach to file organization, coding conventions, 
      and data handling. The goal is to preserve clarity, scalability, consistency, and 
      ensure long-term maintainability.
    </description>
  </overview>

  <tech-stack>
    <frontend>SwiftUI</frontend>
    <state-management>ObservableObject, State, StateObject, EnvironmentObject</state-management>
    <data-layer>Combine or async/await for data fetching</data-layer>
    <storage>UserDefaults, Keychain (for sensitive info), or CoreData (if persistent storage is required)</storage>
    <networking>URLSession or a custom networking layer (if needed)</networking>
    <testing>Xcode unit tests and UI tests</testing>
  </tech-stack>

  <project-structure>
    <general-structure>
      <app>
        <file>App.swift (main entry point)</file>
        <file>AppDelegate.swift (if needed)</file>
        <file>SceneDelegate.swift (if needed)</file>
      </app>
      <views>
        <directory>Views</directory>
        <subdirectory>Screens (full-screen views representing major sections)</subdirectory>
        <subdirectory>Components (reusable view components, such as custom buttons or cards)</subdirectory>
        <subdirectory>Modals (views presented modally)</subdirectory>
      </views>
      <viewmodels>
        <directory>ViewModels</directory>
        <description>Holds ObservableObject-based ViewModels that handle logic and state for corresponding views.</description>
      </viewmodels>
      <models>
        <directory>Models</directory>
        <description>Data structures (e.g., structs, enums) representing domain objects and entities.</description>
      </models>
      <services>
        <directory>Services</directory>
        <description>Networking, data fetching, storage, and utility services that facilitate data flow and operations.</description>
      </services>
      <utilities>
        <directory>Utilities</directory>
        <description>Helper functions, extensions, and general utilities that support the overall codebase.</description>
      </utilities>
      <resources>
        <directory>Resources</directory>
        <description>Static assets such as images, JSON files, and configuration files.</description>
      </resources>
      <tests>
        <directory>Tests</directory>
        <subdirectory>UnitTests (for testing logic in isolation)</subdirectory>
        <subdirectory>UITests (for testing UI behavior and navigation)</subdirectory>
      </tests>
    </general-structure>
  </project-structure>

  <rules>

    <general-rules>
      <rule>
        Use PascalCase for type names (e.g., HomeView, UserViewModel) and camelCase for properties and methods.
      </rule>
      <rule>
        Keep code organized by feature and functionality, ensuring a clear separation of concerns.
      </rule>
      <rule>
        Maintain strict adherence to instructions. If instructed to implement only front-end components, do NOT implement backend logic.
      </rule>
      <rule>
        Do not add unrequested features or code. For example, if asked to create a single button layout, create only that button layout without extra elements.
      </rule>
      <rule>
        Proceed to another project layer (e.g., backend) only when explicitly instructed.
      </rule>
      <rule>
        Always follow the latest updated instructions; do not revert to previous ones without explicit approval.
      </rule>
      <rule>
        Prioritize code cleanliness, reusability, and maintainability. Use refactoring to avoid code duplication and create reusable components and utilities.
      </rule>
    </general-rules>

    <environment-and-configuration-rules>
      <rule>
        Use Swift property wrappers (e.g., @Environment, @AppStorage) for environment and configuration values where appropriate.
      </rule>
      <rule>
        Store sensitive data securely (e.g., Keychain for tokens).
      </rule>
      <rule>
        For multiple build configurations (Debug, Release), manage environment-specific values via configuration files or #if DEBUG flags.
      </rule>
      <rule>
        Update documentation whenever environment handling or configuration rules change.
      </rule>
    </environment-and-configuration-rules>

    <type-rules>
      <rule>
        Define models in the Models directory. Use structs for data and classes for entities that require identity or lifecycle.
      </rule>
      <rule>
        Prefer Codable structs for data parsing.
      </rule>
      <rule>
        Keep type definitions in logically relevant files. For instance, the User model belongs in UserModel.swift.
      </rule>
    </type-rules>

    <swiftui-and-frontend-rules>
      <rule>
        Use SwiftUIâ€™s built-in components and maintain a declarative, reactive UI. Views should focus on layout and presentation.
      </rule>
      <rule>
        Manage state using @State, @StateObject, @ObservedObject, and @EnvironmentObject as appropriate.
      </rule>
      <rule>
        Push business logic into ViewModels, keeping Views as simple and stateless as possible.
      </rule>
      <rule>
        Use async/await or Combine for data fetching. Implement error handling and provide clear feedback to the user.
      </rule>
      <rule>
        Name view files with a View suffix (e.g., HomeView.swift) and view model files with a ViewModel suffix (e.g., HomeViewModel.swift).
      </rule>
      <rule>
        Create reusable UI components in the Components directory. Factor out repeated code into components or utilities to simplify maintenance.
      </rule>
      <rule>
        Views should not fetch data directly. Fetch data in ViewModels or Services and pass it down as needed.
      </rule>
    </swiftui-and-frontend-rules>

  </rules>

</project-instructions>